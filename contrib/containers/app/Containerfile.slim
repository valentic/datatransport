##########################################################################
#
#   Data Transport Network Base Container
#
#   https://rob.cogit8.org/posts/optimizing-django-docker-builds-with-astrals-uv/
#
#   2025-06-09  Todd Valentic
#               Initial implementation
#
##########################################################################

#-------------------------------------------------------------------------
# Stage 1: Build image 
#-------------------------------------------------------------------------

FROM python:3.13-slim AS builder

ENV DATA_TRANSPORT_PATH=/opt/transport \ 
    PATH="/venv/bin:$PATH" \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    UV_CACHE_DIR=/root/.cache/uv \
    UV_COMPILE_BYTECODE=1 \
    UV_FROZEN=1 \
    UV_LINK_MODE=copy \
    UV_NO_MANAGED_PYTHON=1 \
    UV_PROJECT_ENVIRONMENT=/venv \
    UV_PYTHON_DOWNLOADS=never \
    UV_REQUIRE_HASHES=1 \
    UV_VERIFY_HASHES=1 \
    VIRTUAL_ENV=/venv

COPY --from=ghcr.io/astral-sh/uv:0.7.13 /uv /uvx /usr/local/bin/

RUN <<EOT
apt-get update -y && \
apt-get install -y --no-install-recommends \
    build-essential \
    # other build dependencies here
EOT

WORKDIR /opt/transport

ARG BUILD_GROUPS=""

RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock,z \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml,z \
    uv venv $VIRTUAL_ENV && \
    uv sync --no-install-project --no-editable $BUILD_GROUPS

# Copy what's needed to run datatransport 

COPY transport /opt/transport

#-------------------------------------------------------------------------
# Stage 2: Final image 
#-------------------------------------------------------------------------

FROM python:3.13-slim

LABEL   name="datatransport-app" \
        vendor="Todd Valentic" \
        release="1" \
        version="2025-06" \
        summary="Data transport network base image" \
        maintainer="Todd Valentic <todd.valentic@gmail.com>" \
        description="The base container image for the Data Transport Network"


ARG PORT=8081
ENV DATA_TRANSPORT_PATH=/opt/transport \ 
    PATH="/venv/bin:$PATH" \
    PORT=${PORT} \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    VIRTUAL_ENV=/venv

# Create the user and group

ARG USER_NAME=transport \
    USER_UID=1000 \
    USER_GID=1000 

RUN groupadd --gid $USER_GID $USER_NAME && \
    useradd --uid $USER_UID --gid $USER_GID --create-home --shell /bin/bash $USER_NAME

# Install extra packages

RUN <<EOT
apt-get clean -y && \
apt-get update -y && \
apt-get install -y --no-install-recommends \
    bash \
	procps \
    && \
apt-get autoremove -y && \
apt-get clean -y && \
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
EOT

# Copy selectively from builder to optimize final image.

COPY --chown=$USER_NAME:$USER_NAME --from=builder /venv /venv
COPY --chown=$USER_NAME:$USER_NAME --from=builder /opt/transport /opt/transport

# Run

USER $USER_NAME 
WORKDIR $DATA_TRANSPORT_PATH/groups 

EXPOSE ${PORT}
CMD ["transportd"]


